[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "chronal-api"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = []
authors = [{ name = "bartosz121", email = "bmagiera121@gmail.com" }]
dependencies = []

[project.urls]
Documentation = "https://github.com/bartosz1221/chronal-api#readme"
Issues = "https://github.com/bartosz121/chronal-api/issues"
Source = "https://github.com/bartosz121/chronal-api"

[tool.hatch.version]
path = "chronal_api/__about__.py"

[tool.hatch.envs.default]
dependencies = [
    "fastapi>=0.101.1",
    "pip-tools>=7.1.0",
    "pydantic-settings>=2.0.2",
    "uvicorn>=0.23.2",
    "colorama>=0.4;sys_platform == 'win32'",
    "httptools>=0.5.0",
    "python-dotenv>=0.13",
    "uvloop>=0.14.0,!=0.15.0,!=0.15.1; sys_platform != 'win32' and (sys_platform != 'cygwin' and platform_python_implementation != 'PyPy')",
    "watchfiles>=0.13",
    "websockets>=10.4",
    "SQLAlchemy[asyncio]>=2.0.19",
    "aiosqlite>=0.19.0",
    "asyncpg>=0.28.0",
    "alembic>=1.11.2",
    "pysqlite3-binary>=0.5.1",
]
[tool.hatch.envs.default.scripts]
requirements = "hatch dep show requirements --all | pip-compile --generate-hashes --annotate --resolver=backtracking -U -o requirements.txt -"
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]
chronal = "hatch run python chronal_api/main.py"

[[tool.hatch.envs.all.matrix]]
python = ["3.11"]

[tool.hatch.envs.dev]
template = "default"
extra-dependencies = [
    "black>=23.1.0",
    "mypy>=1.0.0",
    "ruff>=0.0.243",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "coverage>=7.2.7",
    "httpx>=0.24.1",
    "coverage[toml]>=6.5",
    "pytest>=7.4.0",

]

[tool.hatch.envs.dev.scripts]
check = [
    "ruff {args:.}",
    "black --check --diff {args:.}",
    "mypy --install-types --non-interactive {args:chronal_api tests}",
]
lint = ["black {args:.}", "ruff --fix {args:.}"]
all = ["check", "lint"]
test = "pytest tests {args:tests}"
test-lib = "pytest tests_lib {args:tests}"
test-all = ["test", "test-lib"]

[tool.black]
target-version = ["py311"]
line-length = 120

[tool.ruff]
target-version = "py311"
line-length = 120
unfixable = [
    "F401", # Don't touch unused imports
    "F841", # Don't touch unused variables
]
ignore = [
    "E501", # Don't touch line length
]

[tool.ruff.isort]
known-first-party = ["chronal_api"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.pytest.ini_options]
asyncio_mode = "auto"

[tool.coverage.run]
source_pkgs = ["chronal_api", "tests"]
branch = true
parallel = true
omit = ["chronal_api/__about__.py"]

[tool.coverage.paths]
chronal_api = ["chronal_api", "*/chronal-api/chronal_api"]
tests = ["tests", "*/chronal-api/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
